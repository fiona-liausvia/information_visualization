<!DOCTYPE html>
<html>
<head>
  <style>
    .links line {
      stroke: #000;
      stroke-opacity: 0.3;
    }

    .nodes circle {
      stroke: #fff;
      stroke-width: 1.5px;
    }

    text {
      font-family: sans-serif;
      font-size: 10px;
    }
  </style>
</head>

<script src="//d3js.org/d3.v4.min.js" charset="utf-8"></script>

<% include ../partials/header.ejs %>
<% include ../partials/nav.ejs %>

<h3 align="center">Stack Overflow Tag Network</h3>

<br>
<p>
Stack Overflow is an online community platform where people share their knowledge and ask questions about codes and technologies in general. When users posts questions, they also put in tags to help users with the right knowledge to find the questions. 
</p>
<p>
We obtained Stack Overflow tags and are interested to see how tags appear together and how they appear separately.
</p>
<p>
Preprocessed dataset can be downloaded <a href="data/stack_overflow.json">here</a>.
</p>

<div id="content">
  <svg width="800" height="650"></svg>
</div>

<br/><br/>

  <script>
    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");

    var color = d3.scaleOrdinal(d3.schemeCategory20);

    var simulation = d3.forceSimulation()
        .force("link", d3.forceLink().id(function(d) { return d.id; }))
        .force("charge", d3.forceManyBody())
        .force("center", d3.forceCenter(width / 2, height / 2));

    d3.json("data/stack_overflow.json", function(error, graph) {
      if (error) throw error;

      var link = svg.append("g")
          .attr("class", "links")
        .selectAll("line")
        .data(graph.links)
        .enter().append("line")
          .attr("stroke-width", function(d) { return Math.sqrt(d.value) / 2.0; });

      var node = svg.append("g")
          .attr("class", "nodes")
        .selectAll("g")
        .data(graph.nodes)
        .enter().append("g")
        
      var circles = node.append("circle")
          .attr("r", function(d) { return Math.log(d.size) * 2; })
          .attr("fill", function(d) { return color(d.group); })
          .call(d3.drag()
              .on("start", dragstarted)
              .on("drag", dragged)
              .on("end", dragended));

      var lables = node.append("text")
          .text(function(d) {
            return d.id;
          })
          .attr('x', 6)
          .attr('y', 3);

      node.append("title")
          .text(function(d) { return d.id; });

      simulation
          .nodes(graph.nodes)
          .on("tick", ticked);

      simulation.force("link")
          .links(graph.links);

      function ticked() {
        link
            .attr("x1", function(d) { return d.source.x; })
            .attr("y1", function(d) { return d.source.y; })
            .attr("x2", function(d) { return d.target.x; })
            .attr("y2", function(d) { return d.target.y; });

        node
            .attr("transform", function(d) {
              return "translate(" + d.x + "," + d.y + ")";
            })
      }
    });

    function dragstarted(d) {
      if (!d3.event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }

    function dragged(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }

    function dragended(d) {
      if (!d3.event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
  </script>

