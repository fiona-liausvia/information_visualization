<!DOCTYPE html>
<html>
<head>
  <style>
    svg {
      font: 10px sans-serif;
    }
    .button {
      background-color: #807265; /* Green */
      border: none;
      color: white;
      padding: 15px 32px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 16px;
    }
  </style>
</head>

<script src="//d3js.org/d3.v4.min.js" charset="utf-8"></script>

<% include ../partials/header.ejs %>
<% include ../partials/nav.ejs %>

<h3 align="center">Conferences by Rank and Number of Papers Published</h3>

<br>
<p>
  We are interested to see how many papers are published in each conferences in their respective ranks each year. <br/>
  Several queries we can answers include: which conferences in each rank publish the most papers? How many papers are published from conferences in certain ranks? Are the numbers changing? 
  Do conferences in higher ranks publish less papers?
</p>
<p>
Preprocessed dataset can be downloaded <a href="data/conf_treemap_2018.json">here (2018)</a> and <a href="data/conf_treemap_2019.json">here (2019)</a>.
</p>


<br/>
<button class="button" onclick="toggle2018()">Year 2018</button>
<button class="button" onclick="toggle2019()">Year 2019</button>

<div id="content2018">
  <svg id="legend" width="500" height="70"></svg>
  <svg class="year2018" width="930" height="800"></svg>
</div>

<div id="content2019">
  <svg id="legend2" width="500" height="70"></svg>
  <svg class="year2019" width="930" height="800"></svg>
</div>


<br/><br/>

<script>
  function toggle2018() {
    var x = document.getElementById("content2018");
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }
    var y = document.getElementById("content2019");
    y.style.display = "block";
  }

  function toggle2019() {
    var x = document.getElementById("content2019");
    if (x.style.display === "none") {
      x.style.display = "block";
    } else {
      x.style.display = "none";
    }

    var y = document.getElementById("content2018");
    y.style.display = "block";
  }

  toggle2019() 

  function set_legend1() {
    d3.select("#legend")
      .append("rect")
      .attr("id", "background")
      .attr("width", 500)
      .attr("height", 70)
      .attr("fill", "white")      

    d3.select("#legend")
      .append("g")
      .attr("id", "rectangles")

    legend_label = ["Rank A", "Rank B", "Rank C"]
    for (var i = 2; i >= 0; i--) {
      d3.select("#rectangles")
        .append("rect")
        .attr("height", 20)
        .attr("width", 20)
        .attr("x", 100 * i + 20)
        .attr("y", 30)
        .attr("fill", color(i))
      d3.select("#rectangles")
        .append("text")
        .attr("x", 100 * i + 50)
        .attr("y", 40)
        .attr("dy", ".35em")
        .attr("font-size", "13px")
        .text(legend_label[i])
    }
  }

  function set_legend2() {
    d3.select("#legend2")
      .append("rect")
      .attr("id", "background")
      .attr("width", 500)
      .attr("height", 70)
      .attr("fill", "white")      

    d3.select("#legend2")
      .append("g")
      .attr("id", "rectangles2")

    legend_label = ["Rank A", "Rank B", "Rank C"]
    for (var i = 2; i >= 0; i--) {
      d3.select("#rectangles2")
        .append("rect")
        .attr("height", 20)
        .attr("width", 20)
        .attr("x", 100 * i + 20)
        .attr("y", 30)
        .attr("fill", color(i))
      d3.select("#rectangles2")
        .append("text")
        .attr("x", 100 * i + 50)
        .attr("y", 40)
        .attr("dy", ".35em")
        .attr("font-size", "13px")
        .text(legend_label[i])
    }
  }

  var fader   = function(color) { return d3.interpolateRgb(color, "#fff")(0.2); }
  var color   = d3.scaleOrdinal(d3.schemeCategory20.map(fader))
  var format  = d3.format(",d")

  set_legend1()
  var color   = d3.scaleOrdinal(d3.schemeCategory20.map(fader))     // reset color

  set_legend2()
  var color   = d3.scaleOrdinal(d3.schemeCategory20.map(fader))     // reset color

  // YEAR 2018
  var svg     = d3.select(".year2018"),
      width   = +svg.attr("width"),
      height  = +svg.attr("height");
  
  var treemap = d3.treemap()
      .tile(d3.treemapResquarify) // treemapSliceDice, treemapResquarify, treemapSquarify, 
      .size([width, height])
      .round(true)
      .paddingInner(1);

  d3.json("data/conf_treemap_2018.json", function(error, data) {
    if (error) throw error;

    var root = d3.hierarchy(data)
        .eachBefore(function(d) { d.data.id = (d.parent ? d.parent.data.id + "." : "") + d.data.name; })
        .sum(sumBySize)
        .sort(function(a, b) { return b.height - a.height || b.value - a.value; });

    treemap(root);

    var cell = svg.selectAll("g")
        .data(root.leaves())
        .enter().append("g")
        .attr("transform", function(d) { return "translate(" + d.x0 + "," + d.y0 + ")"; });

    cell.append("rect")
        .attr("id", function(d) { return d.data.id; })
        .attr("width", function(d) { return d.x1 - d.x0; })
        .attr("height", function(d) { return d.y1 - d.y0; })
        .attr("fill", function(d) { return color(d.parent.data.id); });

    cell.append("clipPath")
        .attr("id", function(d) { return "clip-" + d.data.id; })
        .append("use")
        .attr("xlink:href", function(d) { return "#" + d.data.id; });

    cell.append("text")
        .attr("clip-path", function(d) { return "url(#clip-" + d.data.id + ")"; })
        .selectAll("tspan")
        .data(function(d) { 
          var test = d.data.name + " (" + d.value + ")";
          return test.split(/(?=[A-Z][^A-Z][0-9]\(\))/g); 
        })
        .enter().append("tspan")
        .attr("x", 5)
        .attr("y", function(d, i) { return 13 + i * 10; })
        .text(function(d) { return d; });

    cell.append("title")
        .text(function(d) { return d.data.id + "\n" + format(d.value); });

    /*      
    d3.selectAll("input")
        .data([sumBySize, sumByCount], function(d) { return d ? d.name : this.value; })
        .on("change", changed);

    var timeout = d3.timeout(function() {
      d3.select("input[value=\"sumByCount\"]")
          .property("checked", true)
          .dispatch("change");
    }, 2000);

    function changed(sum) {
      timeout.stop();

      treemap(root.sum(sum));

      cell.transition()
          .duration(750)
          .attr("transform", function(d) { return "translate(" + d.x0 + "," + d.y0 + ")"; })
        .select("rect")
          .attr("width", function(d) { return d.x1 - d.x0; })
          .attr("height", function(d) { return d.y1 - d.y0; });
    }*/
  });

  // YEAR 2019
  var svg2019 = d3.select(".year2019"),
      width = +svg2019.attr("width"),
      height = +svg2019.attr("height");

  d3.json("data/conf_treemap_2019.json", function(error, data) {
    if (error) throw error;

    var root = d3.hierarchy(data)
        .eachBefore(function(d) { d.data.id = (d.parent ? d.parent.data.id + "." : "") + d.data.name; })
        .sum(sumBySize)
        .sort(function(a, b) { return b.height - a.height || b.value - a.value; });

    treemap(root);

    var cell = svg2019.selectAll("g")
        .data(root.leaves())
        .enter().append("g")
        .attr("transform", function(d) { return "translate(" + d.x0 + "," + d.y0 + ")"; });

    cell.append("rect")
        .attr("id", function(d) { return d.data.id; })
        .attr("width", function(d) { return d.x1 - d.x0; })
        .attr("height", function(d) { return d.y1 - d.y0; })
        .attr("fill", function(d) { return color(d.parent.data.id); });

    cell.append("clipPath")
        .attr("id", function(d) { return "clip-" + d.data.id; })
        .append("use")
        .attr("xlink:href", function(d) { return "#" + d.data.id; });

    cell.append("text")
        .attr("clip-path", function(d) { return "url(#clip-" + d.data.id + ")"; })
        .selectAll("tspan")
        .data(function(d) { 
          var test = d.data.name + " (" + d.value + ")";
          return test.split(/(?=[A-Z][^A-Z][0-9]\(\))/g); 
        })
        .enter().append("tspan")
        .attr("x", 5)
        .attr("y", function(d, i) { return 13 + i * 10; })
        .text(function(d) { return d; });

    cell.append("title")
        .text(function(d) { return d.data.id + "\n" + format(d.value); });
  });

  function sumByCount(d) {
    return d.children ? 0 : 1;
  }

  function sumBySize(d) {
    return d.size;
  }

</script>

