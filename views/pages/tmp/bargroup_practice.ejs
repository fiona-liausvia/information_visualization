<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.bar {
  fill: steelblue;
}

.x.axis path {
  display: none;
}

</style>
<body>
<script src="//d3js.org/d3.v3.min.js"></script>
<script>

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x0 = d3.scale.ordinal().rangeRoundBands([0, width - margin.left - margin.right], .1);

var x1 = d3.scale.ordinal();

var y = d3.scale.linear().range([height, 0]);

var color = d3.scale.ordinal()
    .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

var xAxis = d3.svg.axis()
    .scale(x0)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(d3.format(".2s"));

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.csv("data/exam/results.csv", function(error, raw_data) {
  if (error) throw error;

  // reformat data
  buflist = []
  group_by_1 = {}
  for (var i = 0; i < raw_data.length; i++) {
    if (!(raw_data[i].profile in group_by_1)) group_by_1[raw_data[i].profile] = {}
    if (!buflist.includes(raw_data[i].method)) buflist.push(raw_data[i].method)
  }

  for (var i = 0; i < raw_data.length; i++) {
    if (!(raw_data[i].method in group_by_1[raw_data[i].profile])) {
      group_by_1[raw_data[i].profile][raw_data[i].method] = {
        "sum": parseFloat(raw_data[i].avgStall),
        "count": 0
      }
    }
    else {
      group_by_1[raw_data[i].profile][raw_data[i].method].sum += parseFloat(raw_data[i].avgStall)
      group_by_1[raw_data[i].profile][raw_data[i].method].count++      
    }  
  }

  /*
  data = [
    {
      "profile": "profile1",        // x0
      "second_group": [     
        "buf": method,           // x1
        "avg_q": average_avgStall  // y
      ]
    }
  ]
  */

  data = []
  for (var metho in group_by_1) {
    console.log(metho)
    var new_data = {        
      "profile": metho,
      "second_group": []
    }

    for (var buf in group_by_1[metho]) {
      new_data.second_group.push({
        "buf": buf,
        "avg_q": group_by_1[metho][buf].sum / group_by_1[metho][buf].count    
      })      
    }

    data.push(new_data)
  }

  x0.domain(data.map(function(d) { return d.profile; })); // x-axis
  x1.domain(buflist).rangeRoundBands([0, x0.rangeBand()]); // group in each x-axis
  y.domain([0, d3.max(data, function(d) { return d3.max(d.second_group, function(d) { return d.avg_q; }); })]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Average avgStall");

  var profile = svg.selectAll(".profile")
      .data(data)
    .enter().append("g")
      .attr("class", "g")
      .attr("transform", function(d) { return "translate(" + x0(d.profile) + ",0)"; });

  profile.selectAll("rect")
      .data(function(d) { return d.second_group; })
    .enter().append("rect")
      .attr("width", x1.rangeBand())
      .attr("x", function(d) { return x1(d.buf); })
      .attr("y", function(d) {         
        return y(d.avg_q); 
      })
      .attr("height", function(d) { 
        return height - y(d.avg_q); 
      })
      .style("fill", function(d) { return color(d.buf); });

  var legend = svg.selectAll(".legend")
      .data(buflist.slice().reverse())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d; });

});

</script>